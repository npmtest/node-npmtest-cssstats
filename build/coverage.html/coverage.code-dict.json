{"/home/travis/build/npmtest/node-npmtest-cssstats/test.js":"/* istanbul instrument in package npmtest_cssstats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssstats/lib.npmtest_cssstats.js":"/* istanbul instrument in package npmtest_cssstats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cssstats = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cssstats = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cssstats/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cssstats && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cssstats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cssstats\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cssstats.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cssstats.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cssstats.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cssstats.__dirname + '/lib.npmtest_cssstats.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/index.js":"var _ = require('lodash')\nvar postcss = require('postcss')\nvar safeParser = require('postcss-safe-parser')\nvar bytes = require('bytes')\nvar gzipSize = require('gzip-size')\nvar size = require('./lib/size')\nvar rules = require('./lib/rules')\nvar selectors = require('./lib/selectors')\nvar declarations = require('./lib/declarations')\nvar mediaQueries = require('./lib/media-queries')\n\nmodule.exports = function (src, opts) {\n  opts = opts || {}\n  opts = _.defaults(opts, {\n    safe: true,\n    mediaQueries: true,\n    importantDeclarations: false,\n    specificityGraph: false,\n    sortedSpecificityGraph: false,\n    repeatedSelectors: false,\n    propertyResets: false,\n    vendorPrefixedProperties: false\n  })\n\n  function parse (root, result) {\n    var stats = {}\n\n    var string = postcss().process(root).css\n    stats.size = size(string)\n    stats.gzipSize = gzipSize.sync(string)\n    stats.humanizedSize = bytes(stats.size, { decimalPlaces: 0 })\n    stats.humanizedGzipSize = bytes(stats.gzipSize, { decimalPlaces: 0 })\n\n    stats.rules = rules(root, opts)\n    stats.selectors = selectors(root, opts)\n    stats.declarations = declarations(root, opts)\n    stats.mediaQueries = mediaQueries(root, opts)\n\n    // Push message to PostCSS when used as a plugin\n    if (result && result.messages) {\n      result.messages.push({\n        type: 'cssstats',\n        plugin: 'postcss-cssstats',\n        stats: stats\n      })\n    }\n\n    stats.toJSON = function () {\n      // Remove methods when using JSON.stringify\n      delete stats.selectors.getSpecificityGraph\n      delete stats.selectors.getRepeatedValues\n      delete stats.selectors.getSortedSpecificity\n      delete stats.declarations.getPropertyResets\n      delete stats.declarations.getUniquePropertyCount\n      delete stats.declarations.getPropertyValueCount\n      delete stats.declarations.getVendorPrefixed\n      delete stats.declarations.getAllFontSizes\n      delete stats.declarations.getAllFontFamilies\n      return stats\n    }\n\n    // Return stats for default usage\n    return stats\n  }\n\n  if (typeof src === 'string') {\n    // Default behavior\n    var root = postcss().process(src, { parser: safeParser }).root\n    var result = parse(root, {})\n    return result\n  } else if (typeof src === 'object' || typeof src === 'undefined') {\n    // Return a PostCSS plugin\n    return parse\n  } else {\n    throw new TypeError('cssstats expects a string or to be used as a PostCSS plugin')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/size.js":"module.exports = function (string) {\n  return Buffer.byteLength(string, 'utf8')\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/rules.js":"var _ = require('lodash')\n\nmodule.exports = function (root, opts) {\n  var result = {\n    total: 0,\n    size: {\n      graph: [],\n      max: 0,\n      average: 0\n    }\n  }\n\n  root.walkRules(function (rule) {\n    var declarations = 0\n    rule.nodes.forEach(function (node) {\n      if (node.type === 'decl') {\n        declarations++\n      }\n    })\n\n    result.total++\n    result.size.graph.push(declarations)\n  })\n\n  if (result.total > 0) {\n    result.size.max = _.max(result.size.graph)\n    result.size.average = _.sum(result.size.graph) / result.size.graph.length\n  }\n\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/selectors.js":"var _ = require('lodash')\nvar hasIdSelector = require('has-id-selector')\nvar hasClassSelector = require('has-class-selector')\nvar hasPseudoElement = require('has-pseudo-element')\nvar hasPseudoClass = require('has-pseudo-class')\nvar hasElementSelector = require('has-element-selector')\nvar getSpecificityGraph = require('./get-specificity-graph')\nvar getRepeatedValues = require('./get-repeated-values')\nvar getSortedSpecificity = require('./get-sorted-specificity')\n\nmodule.exports = function (root, opts) {\n  var result = {\n    total: 0,\n    type: 0,\n    class: 0,\n    id: 0,\n    pseudoClass: 0,\n    pseudoElement: 0,\n    values: [],\n    specificity: {\n      max: 0,\n      average: 0\n    },\n    getSpecificityGraph: getSpecificityGraph,\n    getSortedSpecificity: getSortedSpecificity,\n    getRepeatedValues: getRepeatedValues\n  }\n\n  var graph\n\n  root.walkRules(function (rule) {\n    rule.selectors.forEach(function (selector) {\n      result.total++\n      result.values.push(selector)\n\n      if (hasElementSelector(selector)) {\n        result.type++\n      }\n\n      if (hasClassSelector(selector)) {\n        result.class++\n      }\n\n      if (hasIdSelector(selector)) {\n        result.id++\n      }\n\n      if (hasPseudoElement(selector)) {\n        result.pseudoElement++\n      }\n\n      if (hasPseudoClass(selector)) {\n        result.pseudoClass++\n      }\n    })\n  })\n\n  graph = result.getSpecificityGraph()\n  result.specificity.max = _.max(graph) || 0\n  result.specificity.average = _.sum(graph) / graph.length || 0\n\n  if (opts.specificityGraph) {\n    result.specificity.graph = graph\n  }\n\n  if (opts.sortedSpecificityGraph) {\n    result.specificity.sortedGraph = result.getSortedSpecificity()\n  }\n\n  if (opts.repeatedSelectors) {\n    result.repeated = result.getRepeatedValues()\n  }\n\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-specificity-graph.js":"var isBlank = require('is-blank')\nvar isPresent = require('is-present')\nvar specificity = require('specificity')\n\nmodule.exports = function (selectors) {\n  selectors = selectors || this.values\n\n  if (isBlank(selectors)) {\n    return false\n  }\n\n  return selectors.filter(isPresent).map(graph)\n\n  function graph (selector) {\n    return specificity.calculate(selector)[0]\n      .specificity\n      .split(',')\n      .map(function (n) {\n        return parseFloat(n)\n      })\n      .reverse()\n      .reduce(function (a, b, i, arr) {\n        b = b < 10 ? b : 9\n        return a + (b * Math.pow(10, i))\n      })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-repeated-values.js":"var _ = require('lodash')\n\nmodule.exports = function (values) {\n  values = values || this.values\n\n  return _.uniq(\n    _.clone(values)\n    .sort()\n    .reduce(function (a, b, i, arr) {\n      if (b === arr[i - 1] || b === arr[i + 1]) {\n        return a.concat(b)\n      } else {\n        return a\n      }\n    }, [])\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-sorted-specificity.js":"var _ = require('lodash')\n\nmodule.exports = function (selectors, graph) {\n  selectors = selectors || this.values\n  graph = graph || this.getSpecificityGraph()\n\n  return _.zipWith(\n    selectors,\n    graph,\n    function (a, b) {\n      return {\n        selector: a,\n        specificity: b\n      }\n    })\n    .sort(function (a, b) {\n      return b.specificity - a.specificity\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/declarations.js":"var getPropertyResets = require('./get-property-resets')\nvar getUniquePropertyCount = require('./get-unique-property-count')\nvar getPropertyValueCount = require('./get-property-value-count')\nvar getVendorPrefixedProperties = require('./get-vendor-prefixed-properties')\nvar getAllFontSizes = require('./get-all-font-sizes')\nvar getAllFontFamilies = require('./get-all-font-families')\n\nmodule.exports = function (root, opts) {\n  var result = {\n    total: 0,\n    unique: 0,\n    important: [],\n    properties: {},\n    getPropertyResets: getPropertyResets,\n    getUniquePropertyCount: getUniquePropertyCount,\n    getPropertyValueCount: getPropertyValueCount,\n    getVendorPrefixed: getVendorPrefixedProperties,\n    getAllFontSizes: getAllFontSizes,\n    getAllFontFamilies: getAllFontFamilies\n  }\n\n  root.walkRules(function (rule) {\n    rule.walkDecls(function (declaration) {\n      var prop = declaration.prop\n\n      result.total++\n\n      if (declaration.important) {\n        result.important.push({\n          property: declaration.prop,\n          value: declaration.value\n        })\n      }\n\n      result.properties[prop] = result.properties[prop] || []\n      result.properties[prop].push(declaration.value)\n    })\n  })\n\n  result.unique = Object.keys(result.properties).reduce(function (a, property) {\n    return a + getUniquePropertyCount.call(result, property)\n  }, 0)\n\n  if (opts.propertyResets) {\n    result.resets = result.getPropertyResets()\n  }\n\n  if (opts.vendorPrefixedProperties) {\n    result.vendorPrefixes = result.getVendorPrefixed()\n  }\n\n  if (!opts.importantDeclarations) {\n    delete result.important\n  }\n\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-property-resets.js":"var _ = require('lodash')\n\nmodule.exports = function (properties) {\n  properties = properties || this.properties\n\n  var resets = {}\n  var declarations = []\n  var PROP_MATCH_REGEX = /(^margin|^padding)/\n  var VALUE_MATCH_REGEX = /^(?:0(?:\\w{2,4}|%)? ?)+$/\n\n  _.forIn(properties, function (values, key) {\n    values.forEach(function (value) {\n      declarations.push({\n        prop: key,\n        value: value\n      })\n    })\n  })\n\n  declarations\n    .filter(function (declaration) {\n      return declaration.prop.match(PROP_MATCH_REGEX)\n    })\n    .forEach(function (declaration) {\n      if (declaration.value.match(VALUE_MATCH_REGEX)) {\n        resets[declaration.prop] |= 0\n        resets[declaration.prop]++\n      }\n    })\n\n  return resets\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-unique-property-count.js":"var _ = require('lodash')\n\nmodule.exports = function (property) {\n  if (!this.properties || !this.properties[property]) {\n    return 0\n  }\n\n  return _.uniq(this.properties[property]).length\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-property-value-count.js":"module.exports = function (property, value) {\n  if (!this.properties || !this.properties[property]) {\n    return 0\n  }\n\n  return this.properties[property]\n    .filter(function (val) {\n      return val === value\n    })\n    .length\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-vendor-prefixed-properties.js":"var isVendorPrefixed = require('is-vendor-prefixed')\n\nmodule.exports = function (properties) {\n  properties = properties || this.properties\n\n  return Object.keys(properties)\n    .filter(function (property) {\n      return isVendorPrefixed(property)\n    })\n    .map(function (property) {\n      var arr = []\n      properties[property].forEach(function (value) {\n        arr.push({\n          property: property,\n          value: value\n        })\n      })\n      return arr\n    })\n    .reduce(function (a, b, i) {\n      return a.concat(b)\n    }, [])\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-all-font-sizes.js":"var shorthandExpand = require('css-shorthand-expand')\n\nmodule.exports = function (properties) {\n  properties = properties || this.properties\n\n  if (!properties) {\n    return 0\n  }\n\n  var fontSizes = properties['font-size'] || []\n\n  if (properties.font) {\n    fontSizes = fontSizes.concat(properties.font\n      .map(function (value) {\n        try {\n          return shorthandExpand('font', value)['font-family']\n        } catch (e) {}\n      })\n      .filter(function (value) {\n        return value\n      })\n    )\n  }\n\n  return fontSizes\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/get-all-font-families.js":"var shorthandExpand = require('css-shorthand-expand')\n\nmodule.exports = function (properties) {\n  properties = properties || this.properties\n\n  if (!properties) {\n    return 0\n  }\n\n  var families = properties['font-family'] || []\n\n  if (properties.font) {\n    families = families.concat(properties.font\n      .map(function (value) {\n        try {\n          return shorthandExpand('font', value)['font-family']\n        } catch (e) {}\n      })\n      .filter(function (value) {\n        return value\n      })\n    )\n  }\n\n  return families\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/media-queries.js":"var _ = require('lodash')\nvar postcss = require('postcss')\nvar rules = require('./rules')\nvar selectors = require('./selectors')\nvar declarations = require('./declarations')\n\nmodule.exports = function (root, opts) {\n  var result = {\n    total: 0,\n    unique: 0,\n    values: [],\n    contents: []\n  }\n\n  root.walkAtRules(function (rule) {\n    if (rule.name === 'media') {\n      result.total++\n      result.values.push(rule.params)\n\n      if (opts.mediaQueries) {\n        var qRoot = postcss.parse(rule.nodes)\n        result.contents.push({\n          value: rule.params,\n          rules: rules(qRoot, opts),\n          selectors: selectors(qRoot, opts),\n          declarations: declarations(qRoot, opts)\n        })\n      } else {\n        delete result.contents\n      }\n    }\n  })\n\n  result.unique = _.uniq(result.values).length\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-cssstats/node_modules/cssstats/lib/selector-parser.js":"\nvar Parser = require('css-selector-parser').CssSelectorParser\n\nvar parser = new Parser()\n\nmodule.exports = parser\n\n"}